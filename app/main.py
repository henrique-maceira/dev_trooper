import asyncio
import signal
import sys
import structlog

from .config import config
from .services.logging_service import setup_logging
try:
    from .telegram_bot import telegram_bot
except Exception as e:
    print(f"‚ö†Ô∏è Erro ao carregar bot real: {e}")
    print("üîÑ Usando vers√£o mock para demonstra√ß√£o...")
    from .telegram_bot_mock import telegram_bot

logger = structlog.get_logger(__name__)

class DevTrooperApp:
    """Aplica√ß√£o principal do Dev Trooper"""
    
    def __init__(self):
        self.running = False
        self.telegram_bot = telegram_bot
    
    async def start(self):
        """Inicia a aplica√ß√£o"""
        try:
            logger.info("üöÄ Iniciando Dev Trooper - Sistema Multi-Agentes")
            
            # Validar configura√ß√µes
            config.validate()
            logger.info("‚úÖ Configura√ß√µes validadas")
            
            # Configurar logging
            setup_logging()
            logger.info("‚úÖ Logging configurado")
            
            # Configurar handlers de sinal
            self._setup_signal_handlers()
            
            # Iniciar bot do Telegram
            self.running = True
            logger.info("ü§ñ Iniciando bot do Telegram...")
            
            await self.telegram_bot.start()
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao iniciar aplica√ß√£o: {e}")
            sys.exit(1)
    
    def _setup_signal_handlers(self):
        """Configura handlers para sinais do sistema"""
        def signal_handler(signum, frame):
            logger.info(f"üì° Sinal {signum} recebido. Encerrando aplica√ß√£o...")
            self.running = False
            sys.exit(0)
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    def stop(self):
        """Para a aplica√ß√£o"""
        logger.info("üõë Parando aplica√ß√£o...")
        self.running = False

async def main():
    """Fun√ß√£o principal"""
    app = DevTrooperApp()
    
    try:
        await app.start()
    except KeyboardInterrupt:
        logger.info("üëã Aplica√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        logger.error(f"‚ùå Erro fatal: {e}")
        sys.exit(1)
    finally:
        app.stop()

if __name__ == "__main__":
    # Executar aplica√ß√£o
    asyncio.run(main())
